# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: CodeScanCloudPrepare@1
  inputs:
    CodeScanCloud: 'app-ser'
    organization: 'test-org1'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'azure4'
    cliProjectName: 'azure4'
    cliSources: '.'
  displayName: 'CodeScan Cloud Prepare'    

- task: CodeScanCloudAnalyze@1
  inputs:
    jdkversion: 'JAVA_HOME_17_X64'

- task: CodeScanCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
            $token = [System.Text.Encoding]::UTF8.GetBytes($env:CODESCAN_TOKEN + ":")
                      $base64 = [System.Convert]::ToBase64String($token)
                      $basicAuth = [string]::Format("Basic {0}", $base64)
                      $headers = @{ Authorization = $basicAuth }
                   
                      Write-Host "Pull Request ID:$($env:SYSTEM_PULLREQUEST_PULLREQUESTID)"
                   
                      $Target = "$env:SYSTEM_PULLREQUEST_PULLREQUESTID"
                      $URL = "https://app.codescan.io/api/qualitygates/project_status?projectKey=azure4&pullRequest={0}"
                      Write-Host "URL PR :$URL"

                      if( !$Target)
                      {
                      $Target = "$env:BUILD_SOURCEBRANCH"
                      $Target = $Target.Replace('refs/heads/','')
                      $URL = "https://app.codescan.io/api/qualitygates/project_status?projectKey=azure4&branch={0}"
                      }
                   
                      $URL = [string]::Format($URL, $Target)
                      Write-Host "URL is :$URL"

                      $result = Invoke-RestMethod -Method Get -Uri $URL  -Headers $headers
                      $result | ConvertTo-Json | Write-Host
                    
                      if ($result.projectStatus.status -eq "OK") {
                      Write-Host "Quality Gate Succeeded"
                      }else{
                      throw "Quality Gate failed"
                      }
